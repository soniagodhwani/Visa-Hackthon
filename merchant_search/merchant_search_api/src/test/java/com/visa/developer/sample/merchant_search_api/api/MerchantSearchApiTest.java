/* ----------------------------------------------------------------------------------------------------------------------
* © Copyright 2018 Visa. All Rights Reserved.
*
* NOTICE: The software and accompanying information and documentation (together, the “Software”) remain the property of
* and are proprietary to Visa and its suppliers and affiliates. The Software remains protected by intellectual property
* rights and may be covered by U.S. and foreign patents or patent applications. The Software is licensed and not sold.
*
* By accessing the Software you are agreeing to Visa's terms of use (developer.visa.com/terms) and privacy policy
* (developer.visa.com/privacy). In addition, all permissible uses of the Software must be in support of Visa products,
* programs and services provided through the Visa Developer Program (VDP) platform only (developer.visa.com).
* THE SOFTWARE AND ANY ASSOCIATED INFORMATION OR DOCUMENTATION IS PROVIDED ON AN “AS IS,” “AS AVAILABLE,” “WITH ALL
* FAULTS” BASIS WITHOUT WARRANTY OR CONDITION OF ANY KIND. YOUR USE IS AT YOUR OWN RISK.
---------------------------------------------------------------------------------------------------------------------- */
/*
 * Merchant Search API
 * Search for merchant identification data using the acquirer provide name and card acceptor identifiers
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.visa.developer.sample.merchant_search_api.api;

import com.visa.developer.sample.merchant_search_api.ApiClient;
import com.visa.developer.sample.merchant_search_api.model.Header;
import com.visa.developer.sample.merchant_search_api.model.MerchantSearchpostPayload;
import com.visa.developer.sample.merchant_search_api.model.MerchantSearchpostResponse;
import com.visa.developer.sample.merchant_search_api.model.SearchAttrList;
import com.visa.developer.sample.merchant_search_api.model.SearchOptions;

import java.io.IOException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import org.junit.Ignore;
import org.threeten.bp.LocalDateTime;
import org.threeten.bp.ZoneId;
import org.threeten.bp.ZonedDateTime;
import org.threeten.bp.format.DateTimeFormatter;
import org.threeten.bp.temporal.ChronoUnit;


import java.util.*;


/**
 * API tests for MerchantSearchApi
 */
public class MerchantSearchApiTest {

    private final MerchantSearchApi api;

    public MerchantSearchApiTest(){
        System.out.println("\nProduct Name: Merchant Search\nApi Name: Merchant Search API");
        ApiClient apiClient = new ApiClient();
        // Configure HTTP basic authorization: basicAuth
        apiClient.setUsername("YOUR USERNAME");
        apiClient.setPassword("YOUR PASSWORD");
        apiClient.setKeystorePath("CERTIFICATE");
        apiClient.setKeystorePassword("PASSWAORD");
        apiClient.setPrivateKeyPassword("PASSWORD");
        
        // To set proxy uncomment the below lines
        // apiClient.setProxyHostName("proxy.address@example.com");
        // apiClient.setProxyPortNumber(0000);
        api = new MerchantSearchApi(apiClient);
        
        
    }

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postmerchantSearchTest() throws IOException {
        
        //String jsonPayload = transformPayload("{\"responseAttrList\": [\"GNSTANDARD\"], \"header\": {\"messageDateTime\": \"2016-05-02T02:33:55.903\", \"startIndex\": \"0\", \"requestMessageId\": \"Request_001\"}, \"searchOptions\": {\"matchScore\": \"true\", \"proximity\": [\"merchantName\"], \"wildCard\": [\"merchantName\"], \"maxRecords\": \"5\", \"matchIndicators\": \"true\"}, \"searchAttrList\": {\"merchantPostalCode\": \"94127\", \"merchantCity\": \"SAN FRANCISCO\", \"merchantState\": \"CA\", \"merchantName\": \"STARBUCKS\", \"merchantCountryCode\": \"840\"}}");
        ObjectMapper mapper = new ObjectMapper();
        MerchantSearchpostPayload body = new MerchantSearchpostPayload();
        
        //MerchantSearchpostPayload body = mapper.readValue(jsonPayload, MerchantSearchpostPayload.class);
        
        Header header = new Header();
        ZoneId zoneId = ZoneId.of("America/Los_Angeles");
        LocalDateTime localDateTime = LocalDateTime.now().truncatedTo(ChronoUnit.SECONDS);
        ZonedDateTime laDateTime = ZonedDateTime.of(localDateTime,zoneId);
        header.setMessageDateTime(DateTimeFormatter.ISO_LOCAL_DATE_TIME.format(LocalDateTime.now()));
        header.startIndex(0);
        header.setRequestMessageId("WAITTIME_001");
        
        SearchOptions searchOptions = new SearchOptions();
        List<String> responseAttrList = new ArrayList<String>();
        responseAttrList.add("GNSTANDARD");
        
        SearchAttrList searchAttrList = new SearchAttrList();
        searchAttrList.setMerchantName("STARBUCKS");
        searchAttrList.setMerchantCountryCode(840);
        
        body.setHeader(header);
        body.searchAttrList(searchAttrList);
        body.searchOptions(searchOptions);
        body.setResponseAttrList(responseAttrList);;
        //System.out.println(body);
        ObjectMapper Obj = new ObjectMapper(); 
        
        try { 
  
            // get Oraganisation object as a json string 
            String jsonStr = Obj.writeValueAsString(body); 
  
            // Displaying JSON String 
            System.out.println(jsonStr); 
        } 
        catch(Exception e)
        {
        	e.printStackTrace();
        }
        MerchantSearchpostResponse response = api.postmerchantSearch(body);
        System.out.println(response);
    }
    

    public String transformPayload(String payload){
        payload = editLocalTime(payload);
        payload = addRandomValue(payload);
        return payload;
    }

    public String editLocalTime(String payload){
        ZoneId zoneId = ZoneId.of("America/Los_Angeles");
        LocalDateTime localDateTime = LocalDateTime.now().truncatedTo(ChronoUnit.SECONDS);
        ZonedDateTime laDateTime = ZonedDateTime.of(localDateTime,zoneId);
        payload = payload.replaceAll("\"localTransactionDateTime\":\\s+\".{19}\"",
                    "\"localTransactionDateTime\": \""+DateTimeFormatter.ISO_LOCAL_DATE_TIME.format(laDateTime)+"\"");
        payload = payload.replaceAll("\"dateTimeLocal\":\\s+\".{10}\"",
                    "\"dateTimeLocal\": \""+DateTimeFormatter.ofPattern("MMddHHmmss").format(laDateTime)+"\"");
        return payload;
    }

    public String addRandomValue(String payload){
        String randomAlphaNumericValue = UUID.randomUUID().toString().replaceAll("-","").substring(0,8);
        Random rand = new Random();
        Integer randomNumber = rand.nextInt(90000) + 10000;
        payload = payload.replaceAll("random_string", randomAlphaNumericValue);
        payload = payload.replaceAll("random_integer", randomNumber.toString());
        payload = payload.replaceAll("random", randomAlphaNumericValue);
        return payload;
    }
}
